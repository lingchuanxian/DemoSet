package cn.lingcx.demoset.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.lingcx.demoset.model.ChatMessageRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_RECORD".
*/
public class ChatMessageRecordDao extends AbstractDao<ChatMessageRecord, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_RECORD";

    /**
     * Properties of entity ChatMessageRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SpeakerId = new Property(1, String.class, "speakerId", false, "SPEAKER_ID");
        public final static Property AudienceId = new Property(2, String.class, "audienceId", false, "AUDIENCE_ID");
        public final static Property OccureTime = new Property(3, java.util.Date.class, "occureTime", false, "OCCURE_TIME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property IsGroupChat = new Property(5, int.class, "isGroupChat", false, "IS_GROUP_CHAT");
        public final static Property Test = new Property(6, int.class, "test", false, "TEST");
    }


    public ChatMessageRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SPEAKER_ID\" TEXT," + // 1: speakerId
                "\"AUDIENCE_ID\" TEXT," + // 2: audienceId
                "\"OCCURE_TIME\" INTEGER," + // 3: occureTime
                "\"CONTENT\" TEXT," + // 4: content
                "\"IS_GROUP_CHAT\" INTEGER NOT NULL ," + // 5: isGroupChat
                "\"TEST\" INTEGER NOT NULL );"); // 6: test
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String speakerId = entity.getSpeakerId();
        if (speakerId != null) {
            stmt.bindString(2, speakerId);
        }
 
        String audienceId = entity.getAudienceId();
        if (audienceId != null) {
            stmt.bindString(3, audienceId);
        }
 
        java.util.Date occureTime = entity.getOccureTime();
        if (occureTime != null) {
            stmt.bindLong(4, occureTime.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getIsGroupChat());
        stmt.bindLong(7, entity.getTest());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String speakerId = entity.getSpeakerId();
        if (speakerId != null) {
            stmt.bindString(2, speakerId);
        }
 
        String audienceId = entity.getAudienceId();
        if (audienceId != null) {
            stmt.bindString(3, audienceId);
        }
 
        java.util.Date occureTime = entity.getOccureTime();
        if (occureTime != null) {
            stmt.bindLong(4, occureTime.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
        stmt.bindLong(6, entity.getIsGroupChat());
        stmt.bindLong(7, entity.getTest());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessageRecord readEntity(Cursor cursor, int offset) {
        ChatMessageRecord entity = new ChatMessageRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // speakerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // audienceId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // occureTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.getInt(offset + 5), // isGroupChat
            cursor.getInt(offset + 6) // test
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpeakerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAudienceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOccureTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsGroupChat(cursor.getInt(offset + 5));
        entity.setTest(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessageRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessageRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
